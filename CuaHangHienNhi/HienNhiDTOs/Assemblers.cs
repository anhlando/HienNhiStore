//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.1 (entitiestodtos.codeplex.com).
//     Timestamp: 2015/05/30 - 12:36:29
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using System.Data.Objects.DataClasses;

namespace HienNhiDTOs
{

    /// <summary>
    /// Assembler for <see cref="ChiTietHDBH"/> and <see cref="ChiTietHDBHDTO"/>.
    /// </summary>
    public static partial class ChiTietHDBHAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="ChiTietHDBHDTO"/> converted from <see cref="ChiTietHDBH"/>.</param>
        static partial void OnDTO(this ChiTietHDBH entity, ChiTietHDBHDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="ChiTietHDBH"/> converted from <see cref="ChiTietHDBHDTO"/>.</param>
        static partial void OnEntity(this ChiTietHDBHDTO dto, ChiTietHDBH entity);

        /// <summary>
        /// Converts this instance of <see cref="ChiTietHDBHDTO"/> to an instance of <see cref="ChiTietHDBH"/>.
        /// </summary>
        /// <param name="dto"><see cref="ChiTietHDBHDTO"/> to convert.</param>
        public static ChiTietHDBH ToEntity(this ChiTietHDBHDTO dto)
        {
            if (dto == null) return null;

            var entity = new ChiTietHDBH();

            entity.MaCTHDBH = dto.MaCTHDBH;
            entity.MaHDBH = dto.MaHDBH;
            entity.MaSP = dto.MaSP;
            entity.SoLuong = dto.SoLuong;
            entity.GiaBan = dto.GiaBan;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="ChiTietHDBH"/> to an instance of <see cref="ChiTietHDBHDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="ChiTietHDBH"/> to convert.</param>
        public static ChiTietHDBHDTO ToDTO(this ChiTietHDBH entity)
        {
            if (entity == null) return null;

            var dto = new ChiTietHDBHDTO();

            dto.MaCTHDBH = entity.MaCTHDBH;
            dto.MaHDBH = entity.MaHDBH;
            dto.MaSP = entity.MaSP;
            dto.SoLuong = entity.SoLuong;
            dto.GiaBan = entity.GiaBan;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="ChiTietHDBHDTO"/> to an instance of <see cref="ChiTietHDBH"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<ChiTietHDBH> ToEntities(this IEnumerable<ChiTietHDBHDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="ChiTietHDBH"/> to an instance of <see cref="ChiTietHDBHDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<ChiTietHDBHDTO> ToDTOs(this IEnumerable<ChiTietHDBH> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="ChiTietHDNH"/> and <see cref="ChiTietHDNHDTO"/>.
    /// </summary>
    public static partial class ChiTietHDNHAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="ChiTietHDNHDTO"/> converted from <see cref="ChiTietHDNH"/>.</param>
        static partial void OnDTO(this ChiTietHDNH entity, ChiTietHDNHDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="ChiTietHDNH"/> converted from <see cref="ChiTietHDNHDTO"/>.</param>
        static partial void OnEntity(this ChiTietHDNHDTO dto, ChiTietHDNH entity);

        /// <summary>
        /// Converts this instance of <see cref="ChiTietHDNHDTO"/> to an instance of <see cref="ChiTietHDNH"/>.
        /// </summary>
        /// <param name="dto"><see cref="ChiTietHDNHDTO"/> to convert.</param>
        public static ChiTietHDNH ToEntity(this ChiTietHDNHDTO dto)
        {
            if (dto == null) return null;

            var entity = new ChiTietHDNH();

            entity.MaCTHDNH = dto.MaCTHDNH;
            entity.MaHDNH = dto.MaHDNH;
            entity.MaSP = dto.MaSP;
            entity.Gia = dto.Gia;
            entity.SoLuong = dto.SoLuong;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="ChiTietHDNH"/> to an instance of <see cref="ChiTietHDNHDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="ChiTietHDNH"/> to convert.</param>
        public static ChiTietHDNHDTO ToDTO(this ChiTietHDNH entity)
        {
            if (entity == null) return null;

            var dto = new ChiTietHDNHDTO();

            dto.MaCTHDNH = entity.MaCTHDNH;
            dto.MaHDNH = entity.MaHDNH;
            dto.MaSP = entity.MaSP;
            dto.Gia = entity.Gia;
            dto.SoLuong = entity.SoLuong;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="ChiTietHDNHDTO"/> to an instance of <see cref="ChiTietHDNH"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<ChiTietHDNH> ToEntities(this IEnumerable<ChiTietHDNHDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="ChiTietHDNH"/> to an instance of <see cref="ChiTietHDNHDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<ChiTietHDNHDTO> ToDTOs(this IEnumerable<ChiTietHDNH> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="ChiTietSBH"/> and <see cref="ChiTietSBHDTO"/>.
    /// </summary>
    public static partial class ChiTietSBHAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="ChiTietSBHDTO"/> converted from <see cref="ChiTietSBH"/>.</param>
        static partial void OnDTO(this ChiTietSBH entity, ChiTietSBHDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="ChiTietSBH"/> converted from <see cref="ChiTietSBHDTO"/>.</param>
        static partial void OnEntity(this ChiTietSBHDTO dto, ChiTietSBH entity);

        /// <summary>
        /// Converts this instance of <see cref="ChiTietSBHDTO"/> to an instance of <see cref="ChiTietSBH"/>.
        /// </summary>
        /// <param name="dto"><see cref="ChiTietSBHDTO"/> to convert.</param>
        public static ChiTietSBH ToEntity(this ChiTietSBHDTO dto)
        {
            if (dto == null) return null;

            var entity = new ChiTietSBH();

            entity.MaCTSBH = dto.MaCTSBH;
            entity.MaSBH = dto.MaSBH;
            entity.NgayTra = dto.NgayTra;
            entity.ThanhTien = dto.ThanhTien;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="ChiTietSBH"/> to an instance of <see cref="ChiTietSBHDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="ChiTietSBH"/> to convert.</param>
        public static ChiTietSBHDTO ToDTO(this ChiTietSBH entity)
        {
            if (entity == null) return null;

            var dto = new ChiTietSBHDTO();

            dto.MaCTSBH = entity.MaCTSBH;
            dto.MaSBH = entity.MaSBH;
            dto.NgayTra = entity.NgayTra;
            dto.ThanhTien = entity.ThanhTien;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="ChiTietSBHDTO"/> to an instance of <see cref="ChiTietSBH"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<ChiTietSBH> ToEntities(this IEnumerable<ChiTietSBHDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="ChiTietSBH"/> to an instance of <see cref="ChiTietSBHDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<ChiTietSBHDTO> ToDTOs(this IEnumerable<ChiTietSBH> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="GiaBan"/> and <see cref="GiaBanDTO"/>.
    /// </summary>
    public static partial class GiaBanAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="GiaBanDTO"/> converted from <see cref="GiaBan"/>.</param>
        static partial void OnDTO(this GiaBan entity, GiaBanDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="GiaBan"/> converted from <see cref="GiaBanDTO"/>.</param>
        static partial void OnEntity(this GiaBanDTO dto, GiaBan entity);

        /// <summary>
        /// Converts this instance of <see cref="GiaBanDTO"/> to an instance of <see cref="GiaBan"/>.
        /// </summary>
        /// <param name="dto"><see cref="GiaBanDTO"/> to convert.</param>
        public static GiaBan ToEntity(this GiaBanDTO dto)
        {
            if (dto == null) return null;

            var entity = new GiaBan();

            entity.MaGia = dto.MaGia;
            entity.MaKH = dto.MaKH;
            entity.MaSP = dto.MaSP;
            entity.Gia = dto.Gia;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="GiaBan"/> to an instance of <see cref="GiaBanDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="GiaBan"/> to convert.</param>
        public static GiaBanDTO ToDTO(this GiaBan entity)
        {
            if (entity == null) return null;

            var dto = new GiaBanDTO();

            dto.MaGia = entity.MaGia;
            dto.MaKH = entity.MaKH;
            dto.MaSP = entity.MaSP;
            dto.Gia = entity.Gia;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="GiaBanDTO"/> to an instance of <see cref="GiaBan"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<GiaBan> ToEntities(this IEnumerable<GiaBanDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="GiaBan"/> to an instance of <see cref="GiaBanDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<GiaBanDTO> ToDTOs(this IEnumerable<GiaBan> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="HoaDonBanHang"/> and <see cref="HoaDonBanHangDTO"/>.
    /// </summary>
    public static partial class HoaDonBanHangAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="HoaDonBanHangDTO"/> converted from <see cref="HoaDonBanHang"/>.</param>
        static partial void OnDTO(this HoaDonBanHang entity, HoaDonBanHangDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="HoaDonBanHang"/> converted from <see cref="HoaDonBanHangDTO"/>.</param>
        static partial void OnEntity(this HoaDonBanHangDTO dto, HoaDonBanHang entity);

        /// <summary>
        /// Converts this instance of <see cref="HoaDonBanHangDTO"/> to an instance of <see cref="HoaDonBanHang"/>.
        /// </summary>
        /// <param name="dto"><see cref="HoaDonBanHangDTO"/> to convert.</param>
        public static HoaDonBanHang ToEntity(this HoaDonBanHangDTO dto)
        {
            if (dto == null) return null;

            var entity = new HoaDonBanHang();

            entity.MaHDBH = dto.MaHDBH;
            entity.MaKH = dto.MaKH;
            entity.NgayLap = dto.NgayLap;
            entity.CKPhanTram = dto.CKPhanTram;
            entity.CKTienMat = dto.CKTienMat;
            entity.ThanhTien = dto.ThanhTien;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="HoaDonBanHang"/> to an instance of <see cref="HoaDonBanHangDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="HoaDonBanHang"/> to convert.</param>
        public static HoaDonBanHangDTO ToDTO(this HoaDonBanHang entity)
        {
            if (entity == null) return null;

            var dto = new HoaDonBanHangDTO();

            dto.MaHDBH = entity.MaHDBH;
            dto.MaKH = entity.MaKH;
            dto.NgayLap = entity.NgayLap;
            dto.CKPhanTram = entity.CKPhanTram;
            dto.CKTienMat = entity.CKTienMat;
            dto.ThanhTien = entity.ThanhTien;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="HoaDonBanHangDTO"/> to an instance of <see cref="HoaDonBanHang"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<HoaDonBanHang> ToEntities(this IEnumerable<HoaDonBanHangDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="HoaDonBanHang"/> to an instance of <see cref="HoaDonBanHangDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<HoaDonBanHangDTO> ToDTOs(this IEnumerable<HoaDonBanHang> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="HoaDonNhapHang"/> and <see cref="HoaDonNhapHangDTO"/>.
    /// </summary>
    public static partial class HoaDonNhapHangAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="HoaDonNhapHangDTO"/> converted from <see cref="HoaDonNhapHang"/>.</param>
        static partial void OnDTO(this HoaDonNhapHang entity, HoaDonNhapHangDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="HoaDonNhapHang"/> converted from <see cref="HoaDonNhapHangDTO"/>.</param>
        static partial void OnEntity(this HoaDonNhapHangDTO dto, HoaDonNhapHang entity);

        /// <summary>
        /// Converts this instance of <see cref="HoaDonNhapHangDTO"/> to an instance of <see cref="HoaDonNhapHang"/>.
        /// </summary>
        /// <param name="dto"><see cref="HoaDonNhapHangDTO"/> to convert.</param>
        public static HoaDonNhapHang ToEntity(this HoaDonNhapHangDTO dto)
        {
            if (dto == null) return null;

            var entity = new HoaDonNhapHang();

            entity.MaHDNH = dto.MaHDNH;
            entity.MaNCC = dto.MaNCC;
            entity.CKPhanTram = dto.CKPhanTram;
            entity.CKTienMat = dto.CKTienMat;
            entity.ThanhTien = dto.ThanhTien;
            entity.NgayLap = dto.NgayLap;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="HoaDonNhapHang"/> to an instance of <see cref="HoaDonNhapHangDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="HoaDonNhapHang"/> to convert.</param>
        public static HoaDonNhapHangDTO ToDTO(this HoaDonNhapHang entity)
        {
            if (entity == null) return null;

            var dto = new HoaDonNhapHangDTO();

            dto.MaHDNH = entity.MaHDNH;
            dto.MaNCC = entity.MaNCC;
            dto.CKPhanTram = entity.CKPhanTram;
            dto.CKTienMat = entity.CKTienMat;
            dto.ThanhTien = entity.ThanhTien;
            dto.NgayLap = entity.NgayLap;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="HoaDonNhapHangDTO"/> to an instance of <see cref="HoaDonNhapHang"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<HoaDonNhapHang> ToEntities(this IEnumerable<HoaDonNhapHangDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="HoaDonNhapHang"/> to an instance of <see cref="HoaDonNhapHangDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<HoaDonNhapHangDTO> ToDTOs(this IEnumerable<HoaDonNhapHang> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="KhachHang"/> and <see cref="KhachHangDTO"/>.
    /// </summary>
    public static partial class KhachHangAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="KhachHangDTO"/> converted from <see cref="KhachHang"/>.</param>
        static partial void OnDTO(this KhachHang entity, KhachHangDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="KhachHang"/> converted from <see cref="KhachHangDTO"/>.</param>
        static partial void OnEntity(this KhachHangDTO dto, KhachHang entity);

        /// <summary>
        /// Converts this instance of <see cref="KhachHangDTO"/> to an instance of <see cref="KhachHang"/>.
        /// </summary>
        /// <param name="dto"><see cref="KhachHangDTO"/> to convert.</param>
        public static KhachHang ToEntity(this KhachHangDTO dto)
        {
            if (dto == null) return null;

            var entity = new KhachHang();

            entity.MaKH = dto.MaKH;
            entity.TenKH = dto.TenKH;
            entity.SoDT = dto.SoDT;
            entity.DiaChi = dto.DiaChi;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="KhachHang"/> to an instance of <see cref="KhachHangDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="KhachHang"/> to convert.</param>
        public static KhachHangDTO ToDTO(this KhachHang entity)
        {
            if (entity == null) return null;

            var dto = new KhachHangDTO();

            dto.MaKH = entity.MaKH;
            dto.TenKH = entity.TenKH;
            dto.SoDT = entity.SoDT;
            dto.DiaChi = entity.DiaChi;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="KhachHangDTO"/> to an instance of <see cref="KhachHang"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<KhachHang> ToEntities(this IEnumerable<KhachHangDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="KhachHang"/> to an instance of <see cref="KhachHangDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<KhachHangDTO> ToDTOs(this IEnumerable<KhachHang> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="LoaiSP"/> and <see cref="LoaiSPDTO"/>.
    /// </summary>
    public static partial class LoaiSPAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="LoaiSPDTO"/> converted from <see cref="LoaiSP"/>.</param>
        static partial void OnDTO(this LoaiSP entity, LoaiSPDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="LoaiSP"/> converted from <see cref="LoaiSPDTO"/>.</param>
        static partial void OnEntity(this LoaiSPDTO dto, LoaiSP entity);

        /// <summary>
        /// Converts this instance of <see cref="LoaiSPDTO"/> to an instance of <see cref="LoaiSP"/>.
        /// </summary>
        /// <param name="dto"><see cref="LoaiSPDTO"/> to convert.</param>
        public static LoaiSP ToEntity(this LoaiSPDTO dto)
        {
            if (dto == null) return null;

            var entity = new LoaiSP();

            entity.MaLoai = dto.MaLoai;
            entity.TenLoai = dto.TenLoai;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="LoaiSP"/> to an instance of <see cref="LoaiSPDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="LoaiSP"/> to convert.</param>
        public static LoaiSPDTO ToDTO(this LoaiSP entity)
        {
            if (entity == null) return null;

            var dto = new LoaiSPDTO();

            dto.MaLoai = entity.MaLoai;
            dto.TenLoai = entity.TenLoai;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="LoaiSPDTO"/> to an instance of <see cref="LoaiSP"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<LoaiSP> ToEntities(this IEnumerable<LoaiSPDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="LoaiSP"/> to an instance of <see cref="LoaiSPDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<LoaiSPDTO> ToDTOs(this IEnumerable<LoaiSP> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="NguoiDung"/> and <see cref="NguoiDungDTO"/>.
    /// </summary>
    public static partial class NguoiDungAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="NguoiDungDTO"/> converted from <see cref="NguoiDung"/>.</param>
        static partial void OnDTO(this NguoiDung entity, NguoiDungDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="NguoiDung"/> converted from <see cref="NguoiDungDTO"/>.</param>
        static partial void OnEntity(this NguoiDungDTO dto, NguoiDung entity);

        /// <summary>
        /// Converts this instance of <see cref="NguoiDungDTO"/> to an instance of <see cref="NguoiDung"/>.
        /// </summary>
        /// <param name="dto"><see cref="NguoiDungDTO"/> to convert.</param>
        public static NguoiDung ToEntity(this NguoiDungDTO dto)
        {
            if (dto == null) return null;

            var entity = new NguoiDung();

            entity.Username = dto.Username;
            entity.Password = dto.Password;
            entity.Role = dto.Role;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="NguoiDung"/> to an instance of <see cref="NguoiDungDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="NguoiDung"/> to convert.</param>
        public static NguoiDungDTO ToDTO(this NguoiDung entity)
        {
            if (entity == null) return null;

            var dto = new NguoiDungDTO();

            dto.Username = entity.Username;
            dto.Password = entity.Password;
            dto.Role = entity.Role;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="NguoiDungDTO"/> to an instance of <see cref="NguoiDung"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<NguoiDung> ToEntities(this IEnumerable<NguoiDungDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="NguoiDung"/> to an instance of <see cref="NguoiDungDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<NguoiDungDTO> ToDTOs(this IEnumerable<NguoiDung> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="NhaCungCap"/> and <see cref="NhaCungCapDTO"/>.
    /// </summary>
    public static partial class NhaCungCapAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="NhaCungCapDTO"/> converted from <see cref="NhaCungCap"/>.</param>
        static partial void OnDTO(this NhaCungCap entity, NhaCungCapDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="NhaCungCap"/> converted from <see cref="NhaCungCapDTO"/>.</param>
        static partial void OnEntity(this NhaCungCapDTO dto, NhaCungCap entity);

        /// <summary>
        /// Converts this instance of <see cref="NhaCungCapDTO"/> to an instance of <see cref="NhaCungCap"/>.
        /// </summary>
        /// <param name="dto"><see cref="NhaCungCapDTO"/> to convert.</param>
        public static NhaCungCap ToEntity(this NhaCungCapDTO dto)
        {
            if (dto == null) return null;

            var entity = new NhaCungCap();

            entity.MaNCC = dto.MaNCC;
            entity.TenNCC = dto.TenNCC;
            entity.SoDT = dto.SoDT;
            entity.DiaChi = dto.DiaChi;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="NhaCungCap"/> to an instance of <see cref="NhaCungCapDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="NhaCungCap"/> to convert.</param>
        public static NhaCungCapDTO ToDTO(this NhaCungCap entity)
        {
            if (entity == null) return null;

            var dto = new NhaCungCapDTO();

            dto.MaNCC = entity.MaNCC;
            dto.TenNCC = entity.TenNCC;
            dto.SoDT = entity.SoDT;
            dto.DiaChi = entity.DiaChi;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="NhaCungCapDTO"/> to an instance of <see cref="NhaCungCap"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<NhaCungCap> ToEntities(this IEnumerable<NhaCungCapDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="NhaCungCap"/> to an instance of <see cref="NhaCungCapDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<NhaCungCapDTO> ToDTOs(this IEnumerable<NhaCungCap> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="SanPham"/> and <see cref="SanPhamDTO"/>.
    /// </summary>
    public static partial class SanPhamAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="SanPhamDTO"/> converted from <see cref="SanPham"/>.</param>
        static partial void OnDTO(this SanPham entity, SanPhamDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="SanPham"/> converted from <see cref="SanPhamDTO"/>.</param>
        static partial void OnEntity(this SanPhamDTO dto, SanPham entity);

        /// <summary>
        /// Converts this instance of <see cref="SanPhamDTO"/> to an instance of <see cref="SanPham"/>.
        /// </summary>
        /// <param name="dto"><see cref="SanPhamDTO"/> to convert.</param>
        public static SanPham ToEntity(this SanPhamDTO dto)
        {
            if (dto == null) return null;

            var entity = new SanPham();

            entity.MaLoai = dto.MaLoai;
            entity.MaSP = dto.MaSP;
            entity.TenSP = dto.TenSP;
            entity.MoTa = dto.MoTa;
            entity.HinhAnh1 = dto.HinhAnh1;
            entity.HinhAnh2 = dto.HinhAnh2;
            entity.HinhAnh3 = dto.HinhAnh3;
            entity.HinhAnh4 = dto.HinhAnh4;
            entity.SoLuong = dto.SoLuong;
            entity.MaNCC = dto.MaNCC;
            entity.GiaVon = dto.GiaVon;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="SanPham"/> to an instance of <see cref="SanPhamDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="SanPham"/> to convert.</param>
        public static SanPhamDTO ToDTO(this SanPham entity)
        {
            if (entity == null) return null;

            var dto = new SanPhamDTO();

            dto.MaLoai = entity.MaLoai;
            dto.MaSP = entity.MaSP;
            dto.TenSP = entity.TenSP;
            dto.MoTa = entity.MoTa;
            dto.HinhAnh1 = entity.HinhAnh1;
            dto.HinhAnh2 = entity.HinhAnh2;
            dto.HinhAnh3 = entity.HinhAnh3;
            dto.HinhAnh4 = entity.HinhAnh4;
            dto.SoLuong = entity.SoLuong;
            dto.MaNCC = entity.MaNCC;
            dto.GiaVon = entity.GiaVon;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="SanPhamDTO"/> to an instance of <see cref="SanPham"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<SanPham> ToEntities(this IEnumerable<SanPhamDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="SanPham"/> to an instance of <see cref="SanPhamDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<SanPhamDTO> ToDTOs(this IEnumerable<SanPham> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="SoBanHang"/> and <see cref="SoBanHangDTO"/>.
    /// </summary>
    public static partial class SoBanHangAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="SoBanHangDTO"/> converted from <see cref="SoBanHang"/>.</param>
        static partial void OnDTO(this SoBanHang entity, SoBanHangDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="SoBanHang"/> converted from <see cref="SoBanHangDTO"/>.</param>
        static partial void OnEntity(this SoBanHangDTO dto, SoBanHang entity);

        /// <summary>
        /// Converts this instance of <see cref="SoBanHangDTO"/> to an instance of <see cref="SoBanHang"/>.
        /// </summary>
        /// <param name="dto"><see cref="SoBanHangDTO"/> to convert.</param>
        public static SoBanHang ToEntity(this SoBanHangDTO dto)
        {
            if (dto == null) return null;

            var entity = new SoBanHang();

            entity.MaSBH = dto.MaSBH;
            entity.NgayLap = dto.NgayLap;
            entity.MaKH = dto.MaKH;
            entity.TongDuNo = dto.TongDuNo;
            entity.NgayDongSo = dto.NgayDongSo;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="SoBanHang"/> to an instance of <see cref="SoBanHangDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="SoBanHang"/> to convert.</param>
        public static SoBanHangDTO ToDTO(this SoBanHang entity)
        {
            if (entity == null) return null;

            var dto = new SoBanHangDTO();

            dto.MaSBH = entity.MaSBH;
            dto.NgayLap = entity.NgayLap;
            dto.MaKH = entity.MaKH;
            dto.TongDuNo = entity.TongDuNo;
            dto.NgayDongSo = entity.NgayDongSo;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="SoBanHangDTO"/> to an instance of <see cref="SoBanHang"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<SoBanHang> ToEntities(this IEnumerable<SoBanHangDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="SoBanHang"/> to an instance of <see cref="SoBanHangDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<SoBanHangDTO> ToDTOs(this IEnumerable<SoBanHang> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }

    /// <summary>
    /// Assembler for <see cref="SoChiTieuCuaHang"/> and <see cref="SoChiTieuCuaHangDTO"/>.
    /// </summary>
    public static partial class SoChiTieuCuaHangAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="SoChiTieuCuaHangDTO"/> converted from <see cref="SoChiTieuCuaHang"/>.</param>
        static partial void OnDTO(this SoChiTieuCuaHang entity, SoChiTieuCuaHangDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="SoChiTieuCuaHang"/> converted from <see cref="SoChiTieuCuaHangDTO"/>.</param>
        static partial void OnEntity(this SoChiTieuCuaHangDTO dto, SoChiTieuCuaHang entity);

        /// <summary>
        /// Converts this instance of <see cref="SoChiTieuCuaHangDTO"/> to an instance of <see cref="SoChiTieuCuaHang"/>.
        /// </summary>
        /// <param name="dto"><see cref="SoChiTieuCuaHangDTO"/> to convert.</param>
        public static SoChiTieuCuaHang ToEntity(this SoChiTieuCuaHangDTO dto)
        {
            if (dto == null) return null;

            var entity = new SoChiTieuCuaHang();

            entity.MaCT = dto.MaCT;
            entity.LyDoChi = dto.LyDoChi;
            entity.NgayGio = dto.NgayGio;
            entity.TongTien = dto.TongTien;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="SoChiTieuCuaHang"/> to an instance of <see cref="SoChiTieuCuaHangDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="SoChiTieuCuaHang"/> to convert.</param>
        public static SoChiTieuCuaHangDTO ToDTO(this SoChiTieuCuaHang entity)
        {
            if (entity == null) return null;

            var dto = new SoChiTieuCuaHangDTO();

            dto.MaCT = entity.MaCT;
            dto.LyDoChi = entity.LyDoChi;
            dto.NgayGio = entity.NgayGio;
            dto.TongTien = entity.TongTien;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="SoChiTieuCuaHangDTO"/> to an instance of <see cref="SoChiTieuCuaHang"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<SoChiTieuCuaHang> ToEntities(this IEnumerable<SoChiTieuCuaHangDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="SoChiTieuCuaHang"/> to an instance of <see cref="SoChiTieuCuaHangDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<SoChiTieuCuaHangDTO> ToDTOs(this IEnumerable<SoChiTieuCuaHang> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
